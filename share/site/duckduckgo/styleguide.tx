<div class="blk  blk--hero">
	<div class="cw--c"><a class="anchor" name="top"></a>
		<div class="logo--dax" title="DuckDuckGo"></div>
		<div class="blk__text">
			<h1 class="hd-hr"><: l("DuckDuckGo Style Guide") :></h1>
			<h5 class="hd-hr"><: l("A guide to stylish elements for all developers.") :></h5>
		</div>
	</div>
</div>
<div class="blk  blk--alt  blk--content">
	<div class="cw--c">
		<div class="blk__text">
			<h2 class="hd-lg"><: l("About This Page") :></h2>
			<hr class="hr"/>
			<p>This is a largely technical document, outlining common elements, styles, and conventions designed for use on DuckDuckGo &mdash; either on the results page itself via <a href="http://duckduckhack.com">instant answers</a>, or on static pages just like this one.</p>
			<h3 class="hd-md"><: l("Table of Contents") :></h3>
			<ul>
				<li><a href="#buttons"><: l("Buttons") :></a></li>
				<li><a href="#icons"><: l("Icons") :></a></li>
				<li><a href="#alerts"><: l("Alert Messages") :></a></li>
				<li><a href="#txt-n-color"><: l("Text & Colors") :></a></li>
				<li><a href="#forms"><: l("Forms") :></a></li>
				<li><a href="#grids"><: l("Grids") :></a></li>
				<li><a href="#popovers">Popovers</a></li>
				<li><a href="#responsive"><: l("Responsiveness") :></a></li>
				<li><a href="#ia_structure"><: l("Instant Answer Structure") :></a></li>
			</ul>
		</div>
	</div>
</div>
<div class="blk  blk--content">
	<div class="cw--c">
		<div class="blk__text">
			<h2 class="hd-lg"><: l("Buttons") :><a name="buttons"></a></h2>
			<hr class="hr"/>
			<p>Buttons are attention-grabbing, and users will expect them to 'do' something, so don't let them down.  Always link your buttons or fire a javascript function on click - don't just use these to fancy the place up!</p>
			
			<h3 class="hd-md"><: l("Variations") :></h3>
			<p>Buttons come in a few different flavours.  The default variety has a white-ish background.  Be sure to use the correct variant based on where you'll be displaying your buttons:</p>
			<div class="tile--a  tile--s  tile--mid">
				<span class="btn">Default</span>
				<span class="btn btn--alt">Alternate</span>
				<span class="btn btn--primary">Primary</span>
				<span class="btn btn--primary--alt">Primary(Alt)</span>
				<span class="btn btn--secondary">Secondary</span>
				<span class="btn btn--wire">Wire</span>
				<code>
<pre>
&lt;span class="btn"&gt;Default&lt;/span&gt;
&lt;span class="btn btn--alt"&gt;Alternate&lt;/span&gt;
&lt;span class="btn btn--primary"&gt;Primary&lt;/span&gt;
&lt;span class="btn btn--primary--alt"&gt;Primary(Alt)&lt;/span&gt;
&lt;span class="btn btn--secondary"&gt;Secondary&lt;/span&gt;
&lt;span class="btn btn--wire"&gt;Wire&lt;/span&gt;</pre>
				</code>
			</div><!--// .tile //-->
			
			<h3 class="hd-md"><: l("Grouping") :></h3>
			<p>Buttons can be squished together to give a 'tabbed' appearance.  This can be accomplished in two different ways - either by wrapping the buttons with a <tt>.btn-grp</tt> element, or by applying the <tt>.btn--grp</tt> class to each item. (The latter could allow you to re-order the buttons if needed.)</p>
			<div class="tile--a  tile--s  tile--mid">
				<div class="fix">
					<div class="half">
						<div class="btn-grp">
							<span class="btn">Tab 1</span>
							<span class="btn">Tab 2</span>
							<span class="btn">Tab 3</span>
						</div>
					</div><div class="half">
						<span class="btn btn--grp btn--grp--fakefirst">Tab 4</span>
						<span class="btn btn--grp btn--grp--first  pull-left">Tab 5</span>
						<span class="btn btn--grp btn--grp--last">Tab 6</span>
					</div>
				</div>
				<code>
<pre>
&lt;div class="btn-grp"&gt;
	&lt;span class="btn"&gt;Tab 1&lt;/span&gt;
	&lt;span class="btn"&gt;Tab 2&lt;/span&gt;
	&lt;span class="btn"&gt;Tab 3&lt;/span&gt;
&lt;/div&gt;

&lt;span class="btn  btn--grp  btn--grp--fakefirst"&gt;Tab 4&lt;/span&gt;
&lt;span class="btn  btn--grp  btn--grp--first  pull-left"&gt;Tab 5&lt;/span&gt;
&lt;span class="btn  btn--grp  btn--grp--last"&gt;Tab 6&lt;/span&gt;</pre>
				</code>
			</div><!--// .tile //-->
		</div><!--// .blk__text //-->
	</div><!--// .cw--c //-->
</div><!--// .blk //-->
<div class="blk  blk--alt  blk--content">
	<div class="cw--c">
		<div class="blk__text">
			<h2 class="hd-lg"><: l("Icons") :><a name="icons"></a></h2>
			<hr class="hr"/>
			<p>Icons are a great way to visualize controls and simplify labels.  We have a built-in icon font that you can use by applying the <tt>.ddgsi</tt> class to any element.  The available icons are:</p>
			<: for $icons -> $icon { :>
			<div class="twenty  thirty--screen-s  half--screen-xs">
				<div class="tile  t-mid">
					<span class="guide-icon-example  ddgsi ddgsi-<:$icon:>"></span>
					<p><tt class="one-line  t-s">.ddgsi-<:$icon:></tt></p>
				</div>
			</div>
			<: } :>
		</div><!--// .blk__text //-->
	</div><!--// .cw--c //-->
</div><!--// .blk //-->
<div class="blk  blk--content">
	<div class="cw--c">
		<div class="blk__text">
			<h2 class="hd-lg"><: l("Alerts & Messages") :><a name="alerts"></a></h2>
			<hr class="hr"/>
			<p>Useful to draw interest on content-heavy pages.</p>
			<div class="tile--a  tile--s  tile--mid">
				<div class="msg">This is a default message.</div>
				<div class="msg  msg--info">This is an info message.</div>
				<div class="msg  msg--help">This is a help message.</div>
				<div class="msg  msg--warning">This is a warning message.</div>
				<code>
<pre>&lt;div class="msg"&gt;This is a default message.&lt;/div&gt;
&lt;div class="msg  msg--info"&gt;This is an info message.&lt;/div&gt;
&lt;div class="msg  msg--help"&gt;This is a help message.&lt;/div&gt;
&lt;div class="msg  msg--warning"&gt;This is a warning message.&lt;/div&gt;</pre>
				</code>
			</div><!--// .tile //-->
		</div><!--// .blk__text //-->
	</div><!--// .cw--c //-->
</div><!--// .blk //-->
<div class="blk  blk--alt  blk--content">
	<div class="cw--c">
		<div class="blk__text">
			<h2 class="hd-lg"><: l("Text & Colors") :><a name="txt-n-color"></a></h2>
			<hr class="hr"/>
			<h3 class="hd-md"><: l("Text Sizes") :></h3>
			<p>The vast majority of DuckDuckGo has been rebuilt using <tt>em</tt> units in order to better accommodate user settings.  As a result, virtually all element sizing can be adjusted simply by changing the font size.</p>
			<p>We have a built-in double-stranded "t-shirt sizing" scale that will allow you to quickly adjust the text size of any element.  Use the <tt>.t-</tt> prefix to scale up or down from the base size, or use the <tt>.h-</tt> prefix to choose header sizes.</p>
			<div class="tile--s  tile--mid  guide-text-spec">
				<div class="fix">
					<div class="half">
						<div class="t-xxxxl">XXXXL</div>
						<div class="t-xxxl">XXXL</div>
						<div class="t-xxl">XXL</div>
						<div class="t-xl">XL</div>
						<div class="t-l">L</div>
						<div class="t-m">M</div>
						<div class="t-s">S</div>
						<div class="t-xs">XS</div>
						<div class="t-xxs">XXS</div>
						<div class="t-xxxs">XXXS</div>
					</div>
					<div class="half  tx-bld">
						<div class="h-xxl">XXL Heading</div>
						<div class="h-xl">XL Heading</div>
						<div class="h-l">L Heading</div>
						<div class="h-m">M Heading</div>
						<div class="h-s">S Heading</div>
						<div class="h-xs">XS Heading</div>
						
						<span class="t-double btn  btn--alt  btn--fill">Big Button</span>
					</div>
				</div>
				<code>
<pre>&lt;div class="t-xxxxl"&gt;XXXXL&lt;/div&gt;
&lt;div class="t-xxxl"&gt;XXXL&lt;/div&gt;
&lt;div class="t-xxl"&gt;XXL&lt;/div&gt;
&lt;div class="t-xl"&gt;XL&lt;/div&gt;
&lt;div class="t-l"&gt;L&lt;/div&gt;
&lt;div class="t-m"&gt;M&lt;/div&gt;
&lt;div class="t-s"&gt;S&lt;/div&gt;
&lt;div class="t-xs"&gt;XS&lt;/div&gt;
&lt;div class="t-xxs"&gt;XXS&lt;/div&gt;
&lt;div class="t-xxxs"&gt;XXXS&lt;/div&gt;

&lt;div class="h-xxl"&gt;XXL Heading&lt;/div&gt;
&lt;div class="h-xl"&gt;XL Heading&lt;/div&gt;
&lt;div class="h-l"&gt;L Heading&lt;/div&gt;
&lt;div class="h-m"&gt;M Heading&lt;/div&gt;
&lt;div class="h-s"&gt;S Heading&lt;/div&gt;
&lt;div class="h-xs"&gt;XS Heading&lt;/div&gt;

&lt;span class="t-double btn  btn--alt  btn--fill"&gt;Big Button&lt;/span&gt;</pre>
				</code>
			</div><!--// .tile //-->
			
			<h3 class="hd-md"><: l("Text Colors") :></h3>
			<p>As a general rule (for the moment) we want to keep the results page largely monochrome.  That said, some variety in text shading is often necessary.  To save you time and keep our page looking good across all themes, please stick to these styling classes when adjusting text colors in your instant answers:</p>
			<div class="tile--s  tile--mid">
				<div class="fix">
					<div class="half">
						<h3 class="text--primary">Primary Text</h3>
						<div class="tx-clr--dk">Primary dark color.</div>
						<div class="tx-clr--dk2">Alternate dark color.</div>
					</div>
					<div class="half">
						<h3 class="text--secondary">Secondary Text</h3>
						<div class="tx-clr--lt">Primary light color.</div>
						<div class="tx-clr--lt2">Alternate light color.</div>
					</div>
				</div>
				<hr class="hr" />
				<p>Feel free to apply these classes to <tt>span</tt>s, <tt>div</tt>s, or any other text element.  This is just an example.</p>
				<code>
<pre>&lt;h3 class="text--primary"&gt;Primary Text&lt;/h3&gt;
&lt;div class="tx-clr--dk"&gt;Primary dark color.&lt;/div&gt;
&lt;div class="tx-clr--dk2"&gt;Alternate dark color.&lt;/div&gt;

&lt;h3 class="text--secondary"&gt;Secondary Text&lt;/h3&gt;
&lt;div class="tx-clr--lt"&gt;Primary light color.&lt;/div&gt;
&lt;div class="tx-clr--lt2"&gt;Alternate light color.&lt;/div&gt;</pre>
				</code>
			</div><!--// .tile //-->
			
			<h3 class="hd-md"><: l("Other Colors") :></h3>
			<div class="guide-clr-wrap">
				<: for $colors -> $color { :>
					<div class="guide-clr  guide-clr--<:$color:>  circle" data-name="$<:$color:>"></div>
				<: } :>
			</div>
		</div><!--// .blk__text //-->
	</div><!--// .cw--c //-->
</div><!--// .blk //-->
<div class="blk  blk--content">
	<div class="cw--c">
		<div class="blk__text">
			<h2 class="hd-lg"><: l("Forms") :><a name="forms"></a></h2>
			<hr class="hr"/>
			<p>Forms are mostly for internal use, and primarially for gathering feedback or accepting newsletter subscriptions.</p>
			
			<h4 class="hd-md"><: l('Newsletter Form') :></h4>
			
			<p>One field with a big button.  Checkmarks optional.</p>
			
			<hr class="hr--mid" />
			
			<div class="t-mid">
				<form class="frm--newsletter" action="https://flash.duckduckgo.com/e.js" method="post" name="y">
					<input type="hidden" name="add" value="1" />
					<input type="text" placeholder="Enter your email address" class="frm__input" name="from" />
					<input type="submit" value="Subscribe" class="frm__btn  btn  btn--abt--prim" />
					<div class="frm--newsletter__chks">
						<label class="frm__label" for="add">
							<input class="frm__label__chk" type="checkbox" id="add" name="add" checked="checked">
							<span class="frm__label__txt">
								Newsletter 
								<span class="frm--newsletter__frq">Monthly</span>
							</span>
						</label>
						<label class="frm__label" for="add2">
							<input class="frm__label__chk" type="checkbox" id="add2" name="add2"> 
							<span class="frm__label__txt">
								Beta
								<span class="frm--newsletter__frq">New stuff</span>
							</span>
						</label>
						<label class="frm__label" for="add3">
							<input class="frm__label__chk" type="checkbox" id="add3" name="add3"> 
							<span class="frm__label__txt">
								Spread
								<span class="frm--newsletter__frq">Promotions</span>
							</span>
						</label>
						<label class="frm__label" for="add4">
							<input class="frm__label__chk" type="checkbox" id="add4" name="add4"> 
							<span class="frm__label__txt">
								Privacy
								<span class="frm--newsletter__frq">Education</span>
							</span>
						</label>
					</div>
				</form>
			</div>
			
			<hr class="hr--mid" />
			
			<h4 class="hd-md"><: l('Feedback Form') :></h4>
			<div class="tile--s  tile--mid">
				<div class="frm  frm--vrt  fix">
					<label class="frm__label"><: l('Form Field'):></label>
					<input type="text" class="frm__input" />
					<label class="frm__label"><: l('Form Field'):></label>
					<div class="frm__input--clearable">
						<input type="text" disabled="disabled" class="frm__input  frm__input--disabled" />
						<a class="frm__input__clear">X</a>
					</div>
					<label for="guide-textarea" class="frm__label"><: l('Text Box:'):></label>
					<textarea class="frm__text" placeholder="Enter your text" id="guide-textarea"></textarea>
					<div class="frm__buttons  pull-right">
						<span class="btn  btn--alt  frm__btn"><: l('Cancel') :></span>
						<span class="btn  btn--primary  frm__btn"><: l('Send') :></span>
					</div>
				</div>
				<code>
<pre>&lt;form class="frm  frm--vrt"&gt;
	&lt;label class="frm__label"&gt;<: l('Form Field'):>&lt;/label&gt;
	&lt;input type="text" class="frm__input" /&gt;
	&lt;label class="frm__label"&gt;<: l('Form Field'):>&lt;/label&gt;
	&lt;div class="frm__input--clearable"&gt;
		&lt;input type="text" disabled="disabled" class="frm__input  frm__input--disabled" /&gt;
		&lt;a class="frm__input__clear"&gt;X&lt;/a&gt;
	&lt;/div&gt;
	&lt;label for="guide-textarea" class="frm__label"&gt;<: l('Text Box:'):>&lt;/label&gt;
	&lt;textarea class="frm__text" placeholder="Enter your text" id="guide-textarea"&gt;&lt;/textarea&gt;
	&lt;div class="frm__buttons  pull-right"&gt;
		&lt;span class="btn  btn--alt  frm__btn"&gt;<: l('Cancel') :>&lt;/span&gt;
		&lt;input type="submit" class="btn  btn--primary  frm__btn" value="<: l('Send') :>"&gt;
	&lt;/div&gt;
&lt;/form&gt;</pre>
				</code>
			</div>
		</div><!--// .blk__text //-->
	</div><!--// .cw--c //-->
</div><!--// .blk //-->
<div class="blk  blk--alt  blk--content">
	<div class="cw--c">
		<div class="blk__text">
			<h2 class="hd-lg"><: l("Grids") :><a name="grids"></a></h2>
			<hr class="hr"/>
			<p>It may occasionally be necessary to visualize pages or results by breaking things up into a grid.  We've come up with an intuitive grid system to help with this:</p>
			
			<h4 class="hd-md"><: l("Easy to Use") :></h4>
			
			<p>Careful consideration was given to the fact that these could see heavy use, so we wanted to make sure that the naming made sense and was easy to recall.  The result is a hybrid system with simple fractions and multiples of ten:</p>
			<div class="tile--s  tile--mid">
				<div class="gw">
					<div class="g  ninety"><span class="guide-grid">.ninety</span></div>
					<div class="g  ten"><span class="guide-grid">.ten</span></div>
					<div class="g  eighty"><span class="guide-grid">.eighty</span></div>
					<div class="g  twenty"><span class="guide-grid">.twenty</span></div>
					<div class="g  seventy"><span class="guide-grid">.seventy</span></div>
					<div class="g  thirty"><span class="guide-grid">.thirty</span></div>
					<div class="g  sixty"><span class="guide-grid">.sixty</span></div>
					<div class="g  forty"><span class="guide-grid">.forty</span></div>
					<div class="g  fifty"><span class="guide-grid">.fifty</span></div>
					<div class="g  fifty"><span class="guide-grid">.fifty</span></div>
				</div>
				<div class="gw">
					<div class="g  quarter"><span class="guide-grid">.quarter</span></div>
					<div class="g  threequarter"><span class="guide-grid">.threequarter(s)</span></div>
					<div class="g  third"><span class="guide-grid">.third</span></div>
					<div class="g  twothird"><span class="guide-grid">.twothird(s)</span></div>
					<div class="g  half"><span class="guide-grid">.half</span></div>
					<div class="g  half"><span class="guide-grid">.half</span></div>
				</div>
			
			</div><!--// .tile //-->
			
			<h4 class="hd-md"><: l("With or Without Wrappers") :></h4>
			
			<p>The grid system can be used with the correct "control" classes (<tt>.gw</tt> on a parent element, and <tt>.g</tt> on each grid item), or it can work without since the default behaviour for all defined grid sizes is to <tt>float: left;</tt>.</p>
			<div class="tile--s  tile--mid">
				<div class="fix">
					<div class="guide-grid  half">.half</div>
					<div class="guide-grid  half">.half</div>
				</div>
				<div class="gw">
					<div class="g  half"><span class="guide-grid">.g.half</span></div>
					<div class="g  half"><span class="guide-grid">.g.half</span></div>
				</div>
				<code>
<pre>&lt;div class="fix"&gt;
	&lt;div class="guide-grid  half"&gt;.half&lt;/div&gt;
	&lt;div class="guide-grid  half"&gt;.half&lt;/div&gt;
&lt;/div&gt;
&lt;div class="gw"&gt;
	&lt;div class="g  half"&gt;&lt;span class="guide-grid"&gt;.g.half&lt;/span&gt;&lt;/div&gt;
	&lt;div class="g  half"&gt;&lt;span class="guide-grid"&gt;.g.half&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;</pre>
				</code>
			</div><!--// .tile //-->
		</div><!--// .blk__text //-->
	</div><!--// .cw--c //-->
</div><!--// .blk //-->
<div class="blk  blk--content">
	<div class="cw--c">
		<div class="blk__text">
			<h2 class="hd-lg">Popovers<a name="popovers"></a></h2>
			<hr class="hr"/>
			<p>Popovers are a way of isolating controls or content.  They should be used with caution and careful consideration.  They work by default without any javascript interaction, allowing for rapid prototyping.  It's generally preferred to override the css <tt>:target</tt> behaviour for consistency, though.</p>
			<div class="tile--s  tile--a  tile--mid">
				<a class="btn btn--alt" href="#guide-popover-one">Launch Popover One</a>
				<a class="btn btn--alt" href="#guide-popover-two">Launch Popover Two</a>
				<div class="popover" id="guide-popover-one">
					<a href="#_" class="popover__esc  js-popover-close"></a>
					<div class="popover__wrap">
						<div class="popover__box">
							<h1 class="guide-popover__title">Hi I'm a Popover!</h1>
							<p>I have a pretty white background.</p>
						</div>
					</div>
				</div>
				<div class="popover  popover--dk" id="guide-popover-two">
					<a href="#_" class="popover__esc  js-popover-close"></a>
					<div class="popover__wrap">
						<div class="popover__box">
							<h1 class="guide-popover__title">Hi I'm also a Popover!</h1>
							<p>I have a darker background.</p>
						</div>
					</div>
				</div>
				<code>
<pre>&lt;a class="btn btn--alt" href="#guide-popover-one"&gt;Launch Popover One&lt;/a&gt;
&lt;a class="btn btn--alt" href="#guide-popover-two"&gt;Launch Popover Two&lt;/a&gt;

&lt;div class="popover" id="guide-popover-one"&gt;
	&lt;a href="#_" class="popover__esc  js-popover-close"&gt;&lt;/a&gt;
	&lt;div class="popover__wrap"&gt;
		&lt;div class="popover__box"&gt;
			&lt;h1 class="guide-popover__title"&gt;Hi I'm a Popover!&lt;/h1&gt;
			&lt;p&gt;I have a pretty white background.&lt;/p&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;div class="popover  popover--dk" id="guide-popover-two"&gt;
	&lt;a href="#_" class="popover__esc  js-popover-close"&gt;&lt;/a&gt;
	&lt;div class="popover__wrap"&gt;
		&lt;div class="popover__box"&gt;
			&lt;h1 class="guide-popover__title"&gt;Hi I'm also a Popover!&lt;/h1&gt;
			&lt;p&gt;I have a darker background.&lt;/p&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;</pre>
				</code>
			</div><!--// .tile //-->
		</div><!--// .blk__text //-->
	</div><!--// .cw--c //-->
</div><!--// .blk //-->
<div class="blk  blk--alt  blk--content">
	<div class="cw--c">
		<div class="blk__text">
			<h2 class="hd-lg"><: l("Responsiveness") :><a name="responsive"></a></h2>
			<hr class="hr"/>
			<p>We want all of our designs to look amazing across all platforms.  Somtimes that means making small tweaks at different screen sizes, and sometimes it calls for major differences.  We've made a wide variety of options available to you. </p>
			
			<h3 class="hd-md"><: l("Horizontal Breakpoints") :></h3>
			<p>When relatively minor tweaks are needed, they're usueally best handled with these built-in helpers.  We've retained the "t-shirt sizing" methodology with our horizontal breakpoints as well, with sizes ranging from extra-small (<tt>--screen-xs</tt>) to extra-large (<tt>--screen-xl</tt>).</p>  
			
			<p>It should be noted that the 'default' styling essentally acts as an undeclared breakpoint somewhere betwen medium (<tt>--screen-m</tt>) and large (<tt>--screen-l</tt>).  Doing it this way allows us to easily cater to browsers that don't support media queries without needing to support separate stylesheets or a myriad of edge-cases.  The result of this is that the 'medium', 'small', and 'extra-small' breakpoints are "max-width" media queries, and the 'large' and 'extra-large' are "min-width".</p>
			<div class="tile--s  tile--mid">
				<h6 class="tx-clr--lt">Current Screen Size:</h6>
				<span class="hd-lg">
					<span class="hide--screen-m  hide--screen-l">Default</span>
					<span class="hide  show--screen-l  hide--screen-xl">Large</span>
					<span class="hide  show--screen-xl">Extra-Large</span>
					<span class="hide  show--screen-m  hide--screen-s">Medium</span>
					<span class="hide  show--screen-s  hide--screen-xs">Small</span>
					<span class="hide  show--screen-xs">Extra-Small</span>
				</span>
				<code>
<pre>&lt;span class="hd-lg"&gt;
	&lt;span class="hide--screen-m  hide--screen-l"&gt;Default&lt;/span&gt;
	&lt;span class="hide  show--screen-l  hide--screen-xl"&gt;Large&lt;/span&gt;
	&lt;span class="hide  show--screen-xl"&gt;Extra-Large&lt;/span&gt;
	&lt;span class="hide  show--screen-m  hide--screen-s"&gt;Medium&lt;/span&gt;
	&lt;span class="hide  show--screen-s  hide--screen-xs"&gt;Small&lt;/span&gt;
	&lt;span class="hide  show--screen-xs"&gt;Extra-Small&lt;/span&gt;
&lt;/span&gt;</pre>
				</code>
			</div> <!--// .tile //-->
			
			<h3 class="hd-md"><: l("Responsive Grids") :></h3>
			<div class="msg--info">All grids auto-collapse at the "small" screen size as a convenience feature.</div>
			<p>Six-column grids just don't work on mobile.  That should be obvious.  Achieving the best layout often means adjusting the column count for different screen sizes.  Adjusting your grid on the fly is easy - use our <a href="#grids">grid names</a>, and combine them with the responsive modifiers from the above example.</p>
			<div class="tile--s  tile--mid">
				<h6>Four-Column Grid, Collapse to Halves</h6>
				<div class="gw">
					<div class="g  quarter  half--screen-s"><span class="guide-grid"> </span></div>
					<div class="g  quarter  half--screen-s"><span class="guide-grid"> </span></div>
					<div class="g  quarter  half--screen-s"><span class="guide-grid"> </span></div>
					<div class="g  quarter  half--screen-s"><span class="guide-grid"> </span></div>
				</div>
				<h6>Or go crazy...</h6>
				<div class="gw">
					<div class="g  ninety--screen-xl  eighty--screen-l  seventy  sixty--screen-m  fifty--screen-s  forty--screen-xs"><span class="guide-grid"> </span></div>
					<div class="g  ten--screen-xl  twenty--screen-l  thirty  forty--screen-m  fifty--screen-s  sixty--screen-xs"><span class="guide-grid"> </span></div>
				</div>
				<code>
<pre>&lt;div class="gw"&gt;
		&lt;div class="g  quarter  half--screen-s"&gt;&lt;span class="guide-grid"&gt; &lt;/span&gt;&lt;/div&gt;
		&lt;div class="g  quarter  half--screen-s"&gt;&lt;span class="guide-grid"&gt; &lt;/span&gt;&lt;/div&gt;
		&lt;div class="g  quarter  half--screen-s"&gt;&lt;span class="guide-grid"&gt; &lt;/span&gt;&lt;/div&gt;
		&lt;div class="g  quarter  half--screen-s"&gt;&lt;span class="guide-grid"&gt; &lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class="gw"&gt;
		&lt;div class="g  ninety--screen-xl  eighty--screen-l  seventy  sixty--screen-m  fifty--screen-s  forty--screen-xs"&gt;
				&lt;span class="guide-grid"&gt; &lt;/span&gt;
		&lt;/div&gt;
		&lt;div class="g  ten--screen-xl  twenty--screen-l  thirty  forty--screen-m  fifty--screen-s  sixty--screen-xs"&gt;
				&lt;span class="guide-grid"&gt; &lt;/span&gt;
		&lt;/div&gt;
&lt;/div&gt;</pre>
				</code>
			</div> <!--// .tile //-->
			
			<h3 class="hd-md"><: l("Vertical Responsiveness") :></h3>
			<p>We are very sensitive to the use of vertical space on our results page.  It becomes even more critical to conserve vertical pixels when on a small desktop screen.  As a result, we apply the <tt>.use-opts</tt> class to the root document when on a vertically small screen.  This allows developers to specify 'optional' areas of their instant answer that can be disabled or otherwise adjusted in order to conserve screen real-estate.</p>
			
			<p>In addition to completely disabling elements, their positioning and text size could be adjusted as well.</p>
			<div class="tile--s  tile--mid">
				<div class="opt  msg--info"><tt>.use-opts</tt> <b>not applied</b></div>
				<div class="gw">
					<span class="g  half  opt--right"><span class="guide-grid">.opt--right</span></span>
					<span class="g  half  opt--left"><span class="guide-grid">.opt--left</span></span>
				</div>
				<p class="opt--t-l">Text size can also be adjusted.</p>
				<p class="opt--t-m">Either up </p>
				<p class="opt--t-s">or down...</p>
				<p class="opt--t-xs">Either subtly...</p>
				<p class="opt--t-xxs">or in less than subtle ways.</p>
			</div> <!--// .tile //-->
		</div><!--// .blk__text //-->
	</div><!--// .cw--c //-->
</div><!--// .blk //-->
<div class="blk  blk--content">
	<div class="cw--c">
		<div class="blk__text">
			<h2 class="hd-lg"><: l("Answer Structure") :><a name="ia_structure"></a></h2>
			<hr class="hr"/>
			<p>There are many useful built-in templates that you are welcome to use when putting together an instant answer.  Sometimes though, you need to color a bit outside the lines.  This is an overview of some of the primary structural classes that you can build from.</p>
			
			<h3 class="hd-md">.zci</h3>
			<p>This is the main wrapper for all instant answers.  It is pre-generated for you and should require no additional styling.  It is hidden by default, and only displayed with the <tt>.is-active</tt> class.</p>
			<div class="tile--s  tile--a  tile--mid">
				<code><pre>&lt;div class="zci"&gt;&lt;/div&gt;</pre></code>
			</div> <!--// .tile //-->
			
			<h3 class="hd-md">.cw and .zci__main</h3>
			<p><tt>.cw</tt> is a global width controller.  <tt>.zci__main</tt> indicates the primary answer area, and applies the correct left padding to maintain the page's 'gutter' layout.  Certain full-width answer types (such as maps) may exclude these classes.</p>
			<div class="tile--s  tile--a  tile--mid">
				<code>
<pre>&lt;div class="zci"&gt;
	&lt;div class="cw"&gt;
		&lt;div class="zci__main"&gt;&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;</pre>
				</code>
			</div> <!--// .tile //-->
			
			<h3 class="hd-md">.zci__aux</h3>
			<p>This is a secondary (auxiliary) section, generally aligned on the right side of the screen.  Home of the infobox.</p>
			<div class="tile--s  tile--a  tile--mid">
				<code>
<pre>&lt;div class="zci"&gt;
	&lt;div class="cw"&gt;
		&lt;div class="zci__main"&gt;&lt;/div&gt;
	&lt;/div&gt;
	&lt;div class="zci__aux"&gt;&lt;/div&gt;
&lt;/div&gt;</pre>
				</code>
			</div> <!--// .tile //-->
			
			<h3 class="hd-md"><: l("Images") :></h3>
			<p>When displaying an image along with the content, we recommend the following structure:</p>
			<div class="tile--s  tile--a  tile--mid">
				<div class="media">
					<div class="zci__img-wrap">
						<img class="zci__img" src="https://duckduckgo.com/i/d4b3d3a2.jpg" alt="duck image" />
					</div>
					<div class="zci__body">Text Goes Here</div>
				</div>
				<code>
<pre>&lt;div class="zci__main"&gt;
	&lt;div class="zci__img-wrap"&gt;
		&lt;img class="zci__img"&gt;
	&lt;/div&gt;
	&lt;div class="zci__body"&gt;Text Goes Here&lt;/div&gt;
&lt;/div&gt;</pre>
				</code>
			</div> <!--// .tile //-->
			
			<h3 class="hd-md"><: l("Headers & Content") :></h3>
			<p>Striking the correct balance can be tricky.  We've done most of the hard stuff for you - just mix-and-match our built-in classes to display your content.</p>
			<div class="tile--s  tile--a  tile--mid">
				<div class="guide-font-reset zci is-active">
					<h1 class="zci__header">Header</h1>
					<div class="zci__content">Main Answer Content - Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit.</div>
					<div class="zci__links"><a href="#" class="zci__more-at">More at DuckDuckGo</a></div>
				</div>
				<div class="guide-font-reset zci is-active">
					<h1 class="zci__header has-sub">Header<span class="zci__header__sub">Nested Subheader</span></h1>
					<div class="zci__content">Main Answer Content - Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit.</div>
					<div class="zci__links"><a href="#" class="zci__more-at">More at DuckDuckGo</a></div>
				</div>
				<div class="guide-font-reset zci is-active">
					<h1 class="zci__header">Header</h1>
					<div class="zci__subheader">Subheader</div>
					<div class="zci__content">Main Answer Content - Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit.</div>
					<div class="zci__links"><a href="#" class="zci__more-at">More at DuckDuckGo</a></div>
				</div>
				<code>
<pre>&lt;div class="zci is-active"&gt;
	&lt;h1 class="zci__header"&gt;Header&lt;/h1&gt;
	&lt;div class="zci__content"&gt;Main Answer Content&lt;/div&gt;
	&lt;div class="zci__links"&gt;&lt;a href="#" class="zci__more-at"&gt;More at DuckDuckGo&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="zci is-active"&gt;
	&lt;h1 class="zci__header has-sub"&gt;Header&lt;span class="zci__header__sub"&gt;Nested Subheader&lt;/span&gt;&lt;/h1&gt;
	&lt;div class="zci__content"&gt;Main Answer Content&lt;/div&gt;
	&lt;div class="zci__links"&gt;&lt;a href="#" class="zci__more-at"&gt;More at DuckDuckGo&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="zci is-active"&gt;
	&lt;h1 class="zci__header"&gt;Header&lt;/h1&gt;
	&lt;div class="zci__subheader"&gt;Subheader&lt;/div&gt;
	&lt;div class="zci__content"&gt;Main Answer Content&lt;/div&gt;
	&lt;div class="zci__links"&gt;&lt;a href="#" class="zci__more-at"&gt;More at DuckDuckGo&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;</pre>
				</code>
			</div> <!--// .tile //-->
			
			<h3 class="hd-md"><: l("Captions") :></h3>
			<p>Simple one-line answers can be very useful!  Simply style your short answers with the <tt>.zci__caption</tt> class.</p>
			<div class="tile--s  tile--a  tile--mid">
				<div class="guide-font-reset zci is-active"><div class="zci__caption">234 + 254 = 488</div></div>
				<code><pre>&lt;div class="zci__caption"&gt;234 + 254 = 488&lt;/div&gt;</pre></code>
			</div> <!--// .tile //-->
			
		</div><!--// .blk__text //-->
	</div><!--// .cw--c //-->
</div><!--// .blk //-->